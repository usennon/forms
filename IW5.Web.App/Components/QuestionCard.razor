@using IW5.Models.Entities
@using IW5.Common.Enums;
@using IW5.BL.Models.ManipulationModels.FormsModels;

<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">@Question.Text</h5>
        @if (!string.IsNullOrEmpty(Question.Description))
        {
            <p class="card-text">@Question.Description</p>
        }
        <p>
            @if (Question.IsRequired)
            {
                <span class="badge bg-danger">Mandatory</span>
            }
            else
            {
                <span class="badge bg-secondary">Non-mandatory</span>
            }
        </p>
        @switch (Question.Type)
        {
            case QuestionType.Test:
                <TestQuestionComponent Options="Question.Options" QuestionId="Question.Id" OnAnswerSelected="OnOptionSelected" />
                break;
            case QuestionType.Text:
                <TextQuestionComponent OnTextChanged="OnTextChanged" />
                break;
            case QuestionType.Numbers:
                <NumberQuestionComponent OnNumberChanged="OnNumberChanged" />
                break;
            case QuestionType.YesNo:
                <YesNoQuestionComponent Question="Question" OnAnswerSelected="OnYesNoSelected" />
                break;
            case QuestionType.MultipleChoice:
                <MultipleChoiceQuestionComponent Options="Question.Options" QuestionId="Question.Id" OnOptionsSelected="OnMultipleSelected" />
                break;
            default:
                <p>Unknown type number</p>
                break;
        }
    </div>
</div>

@code {
    [Parameter]
    public Question Question { get; set; }

    [Parameter] 
    public EventCallback<AnswerSubmission> OnAnswerChanged { get; set; }

    private async Task OnOptionSelected(Guid? optionId)
    {
        // Для Test и YesNo (одиночный выбор)
        var answer = new AnswerSubmission
            {
                QuestionId = Question.Id,
                AnswerOptionId = optionId,
                AnswerText = null
            };
        await OnAnswerChanged.InvokeAsync(answer);
    }

    private async Task OnTextChanged(string text)
    {
        var answer = new AnswerSubmission
            {
                QuestionId = Question.Id,
                AnswerText = text,
                AnswerOptionId = null
            };
        await OnAnswerChanged.InvokeAsync(answer);
    }

    private async Task OnNumberChanged(int? number)
    {
        var answer = new AnswerSubmission
            {
                QuestionId = Question.Id,
                AnswerText = number?.ToString(),
                AnswerOptionId = null
            };
        await OnAnswerChanged.InvokeAsync(answer);
    }

    private async Task OnYesNoSelected(string yesOrNo)
    {
        var answer = new AnswerSubmission
            {
                QuestionId = Question.Id,
                AnswerText = yesOrNo,
                AnswerOptionId = null
            };
        await OnAnswerChanged.InvokeAsync(answer);
    }

    private async Task OnMultipleSelected(List<Guid> selectedOptions)
    {
        // Для множественного выбора можно либо объединить их в строку, либо расширить AnswerSubmission
        // Допустим, объединяем через запятую:
        var answer = new AnswerSubmission
            {
                QuestionId = Question.Id,
                AnswerText = string.Join(",", selectedOptions),
                AnswerOptionId = null
            };
        await OnAnswerChanged.InvokeAsync(answer);
    }
}


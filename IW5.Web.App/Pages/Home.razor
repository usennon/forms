@page "/"
@using IW5.Common.Enums.Sorts
@using IW5.Models.Entities
@using IW5.Web.App.Components
@inject IW5ApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <!-- Page Title -->
    <div class="text-center mb-4">
        <h1 class="fw-bold text-primary">IW5 Forms</h1>
        <p class="text-muted">Manage and explore all available forms.</p>
    </div>

    <!-- Filters & Sorting -->
    <div class="d-flex flex-wrap justify-content-between align-items-start mb-4 gap-3">
        <!-- Search Inputs -->
        <div class="w-100 w-md-50">
            <div class="input-group mb-2">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" id="titleSearch" class="form-control" placeholder="Search by Title..." @oninput="OnSearchInputChanged" />
            </div>
            <div class="input-group mb-2">
                <span class="input-group-text"><i class="bi bi-person"></i></span>
                <input type="text" id="nameSearch" class="form-control" placeholder="Search by Author Name..." @oninput="OnSearchInputNameChanged" />
            </div>
            <div class="input-group mb-2">
                <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                <input type="text" id="emailSearch" class="form-control" placeholder="Search by Email..." @oninput="OnSearchInputEmailChanged" />
            </div>
        </div>

        <!-- Sorting Dropdown -->
        <div class="w-100 w-md-25">
            <label for="sort" class="form-label fw-semibold">Sort By</label>
            <select id="sort" class="form-select" @onchange="OnSortChanged">
                <option value="None">None</option>
                <option value="AscendingTitle">Title Ascending</option>
                <option value="DescendingTitle">Title Descending</option>
                <option value="AscendingStartDate">Start Date Ascending</option>
                <option value="DescendingStartDate">Start Date Descending</option>
                <option value="AscendingEndDate">End Date Ascending</option>
                <option value="DescendingEndDate">End Date Descending</option>
                <option value="AscendingQuestionsCount">Questions Count Ascending</option>
                <option value="DescendingQuestionsCount">Questions Count Descending</option>
            </select>
        </div>
    </div>

    <!-- Create New Form Button -->
    <div class="mb-3 text-start">
        <button class="btn btn-success btn-lg shadow-sm" @onclick="NavigateToCreateForm">
            <i class="bi bi-plus-circle me-2"></i> New
        </button>
    </div>

    <!-- Forms List -->
    <div class="list-group shadow-sm">
        @if (filteredForms == null)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading forms...</p>
            </div>
        }
        else if (filteredForms.Count == 0)
        {
            <p class="text-center text-muted fs-5">No forms found. Try adjusting your filters.</p>
        }
        else
        {
            @foreach (var form in filteredForms)
            {
                <FormCard Form="form" />
            }
        }
    </div>
</div>

<!-- Custom Styles -->
<style>
    .input-group-text {
        background-color: #f8f9fa;
    }

    .form-select {
        border-radius: 10px;
    }

    .list-group {
        border-radius: 10px;
        overflow: hidden;
    }
</style>

@code {
    private List<Form> forms;
    private List<Form> filteredForms;
    private string filterTitle = string.Empty;
    private string filterName = string.Empty;
    private string filterEmail = string.Empty;
    private FormSortType currentSortType = FormSortType.None;

    protected override async Task OnInitializedAsync()
    {
        forms = await ApiService.GetAllFormsAsync();
        filteredForms = new List<Form>(forms);
    }

    private void NavigateToCreateForm()
    {
        NavigationManager.NavigateTo("/create-form");
    }

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        filterTitle = e.Value?.ToString() ?? string.Empty;
        ApplyFilterAndSorting();
    }

    private void OnSearchInputNameChanged(ChangeEventArgs e)
    {
        filterName = e.Value?.ToString() ?? string.Empty;
        ApplyFilterAndSorting();
    }

    private void OnSearchInputEmailChanged(ChangeEventArgs e)
    {
        filterEmail = e.Value?.ToString() ?? string.Empty;
        ApplyFilterAndSorting();
    }

    private void ApplyFilterAndSorting()
    {
        filteredForms = forms.Where(f =>
            (string.IsNullOrEmpty(filterTitle) || f.Title.Contains(filterTitle, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filterName) || f.Author.UserName.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filterEmail) || f.Author.Email.Contains(filterEmail, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        ApplySorting();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        currentSortType = Enum.TryParse<FormSortType>(e.Value?.ToString(), out var sortType)
            ? sortType
            : FormSortType.None;

        ApplySorting();
    }

    private void ApplySorting()
    {
        switch (currentSortType)
        {
            case FormSortType.AscendingTitle:
                filteredForms = filteredForms.OrderBy(f => f.Title).ToList();
                break;
            case FormSortType.DescendingTitle:
                filteredForms = filteredForms.OrderByDescending(f => f.Title).ToList();
                break;
            case FormSortType.AscendingStartDate:
                filteredForms = filteredForms.OrderBy(f => f.StartDate).ToList();
                break;
            case FormSortType.DescendingStartDate:
                filteredForms = filteredForms.OrderByDescending(f => f.StartDate).ToList();
                break;
            case FormSortType.AscendingEndDate:
                filteredForms = filteredForms.OrderBy(f => f.EndDate).ToList();
                break;
            case FormSortType.DescendingEndDate:
                filteredForms = filteredForms.OrderByDescending(f => f.EndDate).ToList();
                break;
            case FormSortType.AscendingQuestionsCount:
                filteredForms = filteredForms.OrderBy(f => f.Questions.Count()).ToList();
                break;
            case FormSortType.DescendingQuestionsCount:
                filteredForms = filteredForms.OrderByDescending(f => f.Questions.Count()).ToList();
                break;
            default:
                break;
        }
    }
}

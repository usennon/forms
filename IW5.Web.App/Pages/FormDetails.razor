@page "/forms/{FormId:guid}"
@using IW5.Models.Entities
@using IW5.Web.App.Components
@using IW5.BL.Models.ManipulationModels.FormsModels;
@inject IW5ApiService ApiService
@inject IW5.Web.App.Services.TokenService TokenService
@inject IJSRuntime JS

<h1>Form Details</h1>

@if (form == null)
{
    <p>Loading form...</p>
}
else
{
    <div class="card shadow-lg mb-4">
        <div class="card-body">
            <h3 class="card-title">@form.Title</h3>
            <p><strong>Start Date:</strong> @form.StartDate.ToString("MMM dd, yyyy")</p>
            <p><strong>End Date:</strong> @form.EndDate.ToString("MMM dd, yyyy")</p>
        </div>
    </div>

    <h4>Questions</h4>
    @if (form.Questions == null || form.Questions.Count == 0)
    {
        <p>No questions available for this form.</p>
    }
    else
    {
        <ul>
            @foreach (var question in form.Questions)
            {
                <QuestionCard Question="question" OnAnswerChanged="HandleAnswerChanged" />
            }
        </ul>
        <button class="btn btn-primary" @onclick="SubmitForm">Submit</button>
    }
}

@code {
    [Parameter] public Guid FormId { get; set; }

    private Form form;

    private Dictionary<Guid, AnswerSubmission> answers = new Dictionary<Guid, AnswerSubmission>();

    protected override async Task OnInitializedAsync()
    {
        form = await ApiService.GetFormByIdAsync(FormId);
    }

    private void HandleAnswerChanged(AnswerSubmission answer)
    {
        answers[answer.QuestionId] = answer;
    }

    private async Task SubmitForm()
    {
        string authorIdString = TokenService.DecodedToken.GetProperty("Id").GetString();
        if (Guid.TryParse(authorIdString, out Guid authorId))
        {
            var submitModel = new SubmitFormModel
                {
                    UserId = authorId,
                    FormId = form.Id,
                    Answers = answers.Values.ToList()
                };
            var json = System.Text.Json.JsonSerializer.Serialize(submitModel, new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true
                });
            JS.InvokeVoidAsync("console.log", json);
            await ApiService.SubmitFormAsync(submitModel);
        }
        else
        {
            throw new Exception("Incorrect token guid");
        }
       
    }
}


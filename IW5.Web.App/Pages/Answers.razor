@page "/answers"
@using IW5.Models.Entities
@using IW5.Web.App.Components
@inject IW5ApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Answers</PageTitle>

<div class="container mt-5">
    <!-- Page Title -->
    <div class="text-center mb-4">
        <h1 class="fw-bold text-primary">IW5 Answers</h1>
        <p class="text-muted">View and manage all answers submitted for the forms.</p>
    </div>

    <!-- Filters & Sorting -->
    <div class="d-flex flex-wrap justify-content-between align-items-start mb-4 gap-3">
        <!-- Search Inputs -->
        <div class="w-100 w-md-50">
            <!-- Question Search -->
            <div class="input-group mb-2">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" id="questionSearch" class="form-control" placeholder="Search by Question..." @oninput="OnSearchInputChanged" />
            </div>
            <!-- User Search -->
            <div class="input-group mb-2">
                <span class="input-group-text"><i class="bi bi-person"></i></span>
                <input type="text" id="userSearch" class="form-control" placeholder="Search by User Name..." @oninput="OnSearchInputUserChanged" />
            </div>
            <!-- Answer Text Search -->
            <div class="input-group mb-2">
                <span class="input-group-text"><i class="bi bi-chat-dots"></i></span>
                <input type="text" id="answerTextSearch" class="form-control" placeholder="Search by Answer Text..." @oninput="OnSearchInputAnswerChanged" />
            </div>
            <!-- Form Search -->
            <div class="input-group mb-2">
                <span class="input-group-text"><i class="bi bi-ui-checks-grid"></i></span>
                <input type="text" id="formSearch" class="form-control" placeholder="Search by Form..." @oninput="OnSearchInputFormChanged" />
            </div>
        </div>

        <!-- Buttons for Grouping Statistics -->
        <div class="d-flex flex-wrap gap-2">
            <button class="btn btn-outline-primary" @onclick="ShowGroupByUser">Group By User</button>
            <button class="btn btn-outline-success" @onclick="ShowGroupByForm">Group By Form</button>
            <button class="btn btn-outline-info" @onclick="ShowGroupByQuestion">Group By Question</button>
            <button class="btn btn-outline-secondary" @onclick="ResetStatistics">Reset</button>
        </div>
    </div>

    <!-- Statistics Display Area -->
    <div class="mb-4">
        <h4 class="fw-bold text-info">Statistics</h4>
        @if (groupedStatistics != null)
        {
            <ul class="list-group">
                @foreach (var item in groupedStatistics)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @item.Key
                        <span class="badge bg-primary rounded-pill">@item.Value</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">Click on a button above to view grouped statistics.</p>
        }
    </div>

    <!-- Answers List -->
    <div class="list-group shadow-sm">
        @if (filteredAnswers == null)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading answers...</p>
            </div>
        }
        else if (filteredAnswers.Count == 0)
        {
            <p class="text-center text-muted fs-5">No answers found. Try adjusting your filters.</p>
        }
        else
        {
            @foreach (var answer in filteredAnswers)
            {
                <AnswerCard Answer="answer" />
            }
        }
    </div>
</div>

@code {
    private List<Answer> answers;
    private List<Answer> filteredAnswers;
    private Dictionary<string, int> groupedStatistics;

    private string filterQuestion = string.Empty;
    private string filterUser = string.Empty;
    private string filterAnswerText = string.Empty;
    private string filterForm = string.Empty;

    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        answers = await ApiService.GetAllAnswersAsync();
        filteredAnswers = new List<Answer>(answers);
    }

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        filterQuestion = e.Value?.ToString() ?? string.Empty;
        ApplyFilter();
    }

    private void OnSearchInputUserChanged(ChangeEventArgs e)
    {
        filterUser = e.Value?.ToString() ?? string.Empty;
        ApplyFilter();
    }

    private void OnSearchInputAnswerChanged(ChangeEventArgs e)
    {
        filterAnswerText = e.Value?.ToString() ?? string.Empty;
        ApplyFilter();
    }

    private void OnSearchInputFormChanged(ChangeEventArgs e)
    {
        filterForm = e.Value?.ToString() ?? string.Empty;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredAnswers = answers.Where(a =>
            (string.IsNullOrEmpty(filterQuestion) || a.Question.Text.Contains(filterQuestion, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filterUser) || a.User.UserName.Contains(filterUser, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filterAnswerText) || a.AnswerText.Contains(filterAnswerText, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filterForm) || a.Form.Title.Contains(filterForm, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || a.CreatedAt.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || a.CreatedAt.Date <= endDate.Value.Date)
        ).ToList();
    }

    private void ShowGroupByUser()
    {
        groupedStatistics = answers
            .GroupBy(a => a.User.UserName)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private void ShowGroupByForm()
    {
        groupedStatistics = answers
            .GroupBy(a => a.Form.Title)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private void ShowGroupByQuestion()
    {
        groupedStatistics = answers
            .GroupBy(a => a.Question.Text)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private void ResetStatistics()
    {
        groupedStatistics = null;
    }
}

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text
@using System.Text.Json
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider
@inject IW5.Web.App.Services.TokenService TokenService
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <div class="auth-container d-flex align-items-center gap-3">
            @if (TokenService.DecodedToken.GetProperty("username").GetString() != null)
            {
                <span class="auth-username fw-semibold text-primary">
                    Hello, @TokenService.DecodedToken.GetProperty("username").GetString()!
                </span>
            }
            else
            {
                <span class="auth-loading text-muted">Loading...</span>
            }

            <button class="btn btn-sm btn-outline-danger auth-logout-btn px-3 py-1 fw-semibold" @onclick="BeginLogOut">
                Log out
            </button>
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="text-center mt-2">
            <a class="btn btn-sm btn-primary fw-semibold px-3 py-1" href="authentication/login">
                Log in
            </a>
        </div>
    </NotAuthorized>
</AuthorizeView>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .auth-username {
        font-size: 0.95rem;
        color: #0d6efd;
    }

    .auth-loading {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .auth-logout-btn {
        border-radius: 20px;
        font-size: 0.85rem;
        transition: all 0.2s ease-in-out;
    }

    .auth-logout-btn:hover {
       background-color: #dc3545;
       color: white;
    }

</style>


@code {
    protected override async Task OnInitializedAsync()
    {
        var result = await TokenProvider.RequestAccessToken();
        if (result.TryGetToken(out var token))
        {
            try
            {
                DecodeJwt(token.Value);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error decoding token: {ex.Message}");
                Navigation.NavigateTo("authentication/login");
            }
        }
        else
        {
            Navigation.NavigateTo("authentication/login");
        }
    }

    private void DecodeJwt(string jwt)
    {
        var parts = jwt.Split('.');
        if (parts.Length != 3)
        {
            Console.WriteLine("Invalid JWT format.");
            return;
        }

        try
        {
            var payloadJson = Base64UrlDecode(parts[1]);

            // Deserialize into a C# object (if desired)
            // For example, using System.Text.Json:
            var payloadData = JsonSerializer.Deserialize<JsonElement>(payloadJson);
            TokenService.DecodedToken = payloadData;

            // You can now work with headerData and payloadData
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing JWT: {ex.Message}");
        }
    }

    private string Base64UrlDecode(string input)
    {
        string output = input.Replace('-', '+').Replace('_', '/');
        output = output.PadRight(output.Length + (4 - output.Length % 4) % 4, '=');
        var bytes = Convert.FromBase64String(output);
        return Encoding.UTF8.GetString(bytes);
    }

    private void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
}
